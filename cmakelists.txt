MACRO(HEADER_DIRECTORIES return_list)
    FILE(GLOB_RECURSE new_list /opt/homebrew/include/Qt*.h)
    SET(dir_list "")
    FOREACH(file_path ${new_list})
        GET_FILENAME_COMPONENT(dir_path ${file_path} PATH)
        SET(dir_list ${dir_list} ${dir_path})
    ENDFOREACH()
    LIST(REMOVE_DUPLICATES dir_list)
    SET(${return_list} ${dir_list})
ENDMACRO()
MACRO(LIB_DIRECTORIES qt_dir return_list)
    FILE(GLOB_RECURSE new_list ${qt_dir}/*)
    SET(dir_list "")
    FOREACH(file_path ${new_list})
        GET_FILENAME_COMPONENT(dir_path ${file_path} PATH)
        SET(dir_list ${dir_list} ${dir_path})
    ENDFOREACH()
    LIST(REMOVE_DUPLICATES dir_list)
    SET(${return_list} ${dir_list})
ENDMACRO()


cmake_minimum_required(VERSION 3.12)

project(play_video VERSION 1.0.0 LANGUAGES C CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

if(${CMAKE_VERSION} VERSION_GREATER_EQUAL "3.11.0")
    file(GLOB pybind_source_files CONFIGURE_DEPENDS src/python_bindings/*pp)
    file(GLOB SOURCE_FILES CONFIGURE_DEPENDS src/*pp) 
else()
    file(GLOB pybind_source_files src/python_bindings/*pp)
    file(GLOB SOURCE_FILES src/*pp)
endif()

find_package(Qt6 COMPONENTS Widgets MultimediaWidgets Multimedia REQUIRED)

add_executable(${PROJECT_NAME} ${SOURCE_FILES} )
add_library(${PROJECT_NAME}_lib ${SOURCE_FILES} )

include_directories(PUBLIC "${PROJECT_SOURCE_DIR}/src")

target_link_libraries(${PROJECT_NAME} Qt6::Widgets Qt6::Multimedia Qt6::MultimediaWidgets)
# target_link_libraries(${PROJECT_NAME}_lib PUBLIC Qt6::Widgets Qt6::Multimedia Qt6::MultimediaWidgets)

# -----------------------------------------------------------------------------------------------------------------
# PYTHON STUFF
# -----------------------------------------------------------------------------------------------------------------
execute_process ( COMMAND which python OUTPUT_VARIABLE python_executable)
string(STRIP ${python_executable} python_executable)  # remove newline at end
execute_process ( COMMAND dirname ${python_executable} OUTPUT_VARIABLE python_bin_dir )
string(STRIP ${python_bin_dir} python_bin_dir)  # remove newline at end
execute_process ( COMMAND dirname ${python_bin_dir} OUTPUT_VARIABLE python_home_dir)
string(STRIP ${python_home_dir} python_home_dir)  # remove newline at end
set(Python_FIND_STRATEGY LOCATION)
set(Python_ROOT_DIR ${python_home_dir})
set(Python_INCLUDES "${python_home_dir}/include") 
set(Python_LIBRARY "${python_home_dir}/lib")
set(Python_EXECUTABLE ${python_executable})

if(${CMAKE_VERSION} VERSION_GREATER "3.14.0")
  find_package(Python REQUIRED COMPONENTS NumPy)
else()
  find_package(NumPy REQUIRED)
endif()
find_package(pybind11)
find_package(PyQt6)
message(${_PyQt6_PATH})

pybind11_add_module("${PROJECT_NAME}_py" ${pybind_source_files})
HEADER_DIRECTORIES(header_dir_list)
LIB_DIRECTORIES("${_PyQt6_PATH}/Qt6" pyqt6_libs)

# list(LENGTH header_dir_list header_dir_list_count)
# message(STATUS "[INFO] Found ${header_dir_list_count} header directories.")
# list(LENGTH pyqt6_libs header_dir_list_count)
# message(STATUS "[INFO] Found ${header_dir_list_count} lib directories.")


target_link_directories(${PROJECT_NAME}_lib INTERFACE ${pyqt6_libs})
target_include_directories("${PROJECT_NAME}_lib" PUBLIC ${header_dir_list} "/opt/homebrew/include")
target_link_libraries("${PROJECT_NAME}_py" PUBLIC "${PROJECT_NAME}_lib")

# add_custom_command(TARGET "${PROJECT_NAME}_py" POST_BUILD
#         COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:Qt6::Core> $<TARGET_FILE_DIR:${PROJECT_NAME}_py>
#         COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:Qt6::Gui> $<TARGET_FILE_DIR:${PROJECT_NAME}_py>
#         COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:Qt6::Widgets> $<TARGET_FILE_DIR:${PROJECT_NAME}_py>
#         COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:Qt6::Multimedia> $<TARGET_FILE_DIR:${PROJECT_NAME}_py>
#         COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:Qt6::MultimediaWidgets> $<TARGET_FILE_DIR:${PROJECT_NAME}_py>
#         )