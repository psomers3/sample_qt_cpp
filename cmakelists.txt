

cmake_minimum_required(VERSION 3.12)

project(play_video VERSION 1.0.0 LANGUAGES C CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
include(tools)
# all includes are with the source files
RECURSIVE_DIRECTORIES("${PROJECT_SOURCE_DIR}/src/*" project_includes)
include_directories(PUBLIC ${project_includes})

if(${CMAKE_VERSION} VERSION_GREATER_EQUAL "3.11.0")
    file(GLOB pybind_source_files CONFIGURE_DEPENDS src/python_bindings/*pp)
    file(GLOB SOURCE_FILES CONFIGURE_DEPENDS src/*pp) 
else()
    file(GLOB pybind_source_files src/python_bindings/*pp)
    file(GLOB SOURCE_FILES src/*pp)
endif()

# These are needed for dealing with Qt stuff
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)
find_package(Qt6 COMPONENTS Widgets MultimediaWidgets Multimedia REQUIRED)

add_executable(${PROJECT_NAME} ${SOURCE_FILES} )
add_library(${PROJECT_NAME}_lib ${SOURCE_FILES} )


# -----------------------------------------------------------------------------------------------------------------
# PYTHON STUFF
# -----------------------------------------------------------------------------------------------------------------
execute_process ( COMMAND which python OUTPUT_VARIABLE python_executable)
string(STRIP ${python_executable} python_executable)  # remove newline at end
execute_process ( COMMAND dirname ${python_executable} OUTPUT_VARIABLE python_bin_dir )
string(STRIP ${python_bin_dir} python_bin_dir)  # remove newline at end
execute_process ( COMMAND dirname ${python_bin_dir} OUTPUT_VARIABLE python_home_dir)
string(STRIP ${python_home_dir} python_home_dir)  # remove newline at end
set(Python_FIND_STRATEGY LOCATION)
set(Python_ROOT_DIR ${python_home_dir})
set(Python_INCLUDES "${python_home_dir}/include") 
set(Python_LIBRARY "${python_home_dir}/lib")
set(Python_EXECUTABLE ${python_executable})

if(${CMAKE_VERSION} VERSION_GREATER "3.14.0")
  find_package(Python REQUIRED COMPONENTS NumPy)
else()
  find_package(NumPy REQUIRED)
endif()

find_package(pybind11)
find_package(PyQt6)

pybind11_add_module("${PROJECT_NAME}_py" ${pybind_source_files})

target_link_libraries("${PROJECT_NAME}" PUBLIC ${PyQt6_LIBRARIES})

target_link_libraries("${PROJECT_NAME}_lib" PUBLIC ${PyQt6_LIBRARIES})
target_link_libraries("${PROJECT_NAME}_py" PUBLIC ${PyQt6_LIBRARIES})

target_include_directories("${PROJECT_NAME}" PUBLIC ${pyqt6_includes} "/opt/homebrew/include")
target_include_directories("${PROJECT_NAME}_lib" PUBLIC ${pyqt6_includes} "/opt/homebrew/include")
target_link_libraries("${PROJECT_NAME}_py" PUBLIC "${PROJECT_NAME}_lib")